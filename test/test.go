package test

// import (
// 	"fmt"
// 	"net/http"
// 	"time"

// 	"github.com/gin-gonic/gin"
// 	"github.com/huynhbaoking112/Create_MemCache_Golang.git/global"
// 	"github.com/huynhbaoking112/Create_MemCache_Golang.git/models"
// 	"gorm.io/gorm"
// )

// // ƒê·ªãnh nghƒ©a khung gi·ªù cho c√°c ca l√†m vi·ªác
// var shifts = map[int]struct {
// 	Start string
// 	End   string
// }{
// 	1: {"06:00:00", "12:00:00"},
// 	2: {"12:00:00", "18:00:00"},
// 	3: {"18:00:00", "22:00:00"},
// }

// // H√†m ch·∫•m c√¥ng
// func (u *User) Checkin(c *gin.Context) {
// 	// L·∫•y DB t·ª´ global
// 	db := global.Mdb

// 	var body struct {
// 		EmployeeID int
// 		Date       string
// 		Time       string
// 	}

// 	// ƒê·ªçc d·ªØ li·ªáu t·ª´ request
// 	if err := c.Bind(&body); err != nil {
// 		c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to read body"})
// 		return
// 	}

// 	// L·∫•y th√¥ng tin user t·ª´ context
// 	user, exists := c.Get("user")
// 	if !exists {
// 		c.JSON(http.StatusUnauthorized, gin.H{"message": "User not found in context"})
// 		return
// 	}

// 	// √âp ki·ªÉu user v·ªÅ models.Employee
// 	userModel, ok := user.(models.Employee)
// 	if !ok {
// 		c.JSON(http.StatusInternalServerError, gin.H{"message": "Failed to parse user data"})
// 		return
// 	}

// 	// G√°n ID c·ªßa user v√†o body
// 	body.EmployeeID = int(userModel.ID)

// 	// Ki·ªÉm tra xem nh√¢n vi√™n ƒë√£ ƒëƒÉng k√Ω ca n√†o trong ng√†y ch∆∞a
// 	var registrations []Registration
// 	err := db.Where("employee_id = ? AND date = ?", body.EmployeeID, body.Date).Find(&registrations).Error
// 	if err != nil || len(registrations) == 0 {
// 		c.JSON(http.StatusForbidden, gin.H{"message": "Employee has not registered any shifts today"})
// 		return
// 	}

// 	// Chuy·ªÉn ƒë·ªïi th·ªùi gian nh·∫≠p v√†o
// 	checkTime, err := time.Parse("15:04:05", body.Time)
// 	if err != nil {
// 		c.JSON(http.StatusBadRequest, gin.H{"message": "Invalid time format"})
// 		return
// 	}

// 	// T√¨m ca l√†m h·ª£p l·ªá
// 	var selectedShift *Registration
// 	for _, reg := range registrations {
// 		shift, exists := shifts[reg.Shift]
// 		if !exists {
// 			continue
// 		}

// 		startTime, _ := time.Parse("15:04:05", shift.Start)
// 		endTime, _ := time.Parse("15:04:05", shift.End)

// 		// Ki·ªÉm tra n·∫øu th·ªùi gian nh·∫≠p v√†o n·∫±m trong ca n√†y
// 		if checkTime.After(startTime.Add(-5*time.Minute)) && checkTime.Before(endTime.Add(5*time.Minute)) {
// 			selectedShift = &reg
// 			break
// 		}
// 	}

// 	// N·∫øu kh√¥ng c√≥ ca ph√π h·ª£p, tr·∫£ v·ªÅ l·ªói
// 	if selectedShift == nil {
// 		c.JSON(http.StatusForbidden, gin.H{"message": "Invalid shift time"})
// 		return
// 	}

// 	// L·∫•y th√¥ng tin ca l√†m vi·ªác
// 	shift := shifts[selectedShift.Shift]
// 	startTime, _ := time.Parse("15:04:05", shift.Start)
// 	endTime, _ := time.Parse("15:04:05", shift.End)

// 	// Ki·ªÉm tra ƒëi tr·ªÖ ho·∫∑c v·ªÅ s·ªõm
// 	if checkTime.After(startTime.Add(5 * time.Minute)) {
// 		fmt.Println("üö® Nh√¢n vi√™n ƒëi tr·ªÖ üö®")
// 	}

// 	if checkTime.Before(endTime.Add(-5 * time.Minute)) {
// 		fmt.Println("üö® Nh√¢n vi√™n v·ªÅ s·ªõm üö®")
// 	}

// 	// Ki·ªÉm tra xem ƒë√£ c√≥ check-in tr∆∞·ªõc ƒë√≥ kh√¥ng
// 	var attendance Attendance
// 	result := db.Where("employee_id = ? AND date = ? AND shift = ?", body.EmployeeID, body.Date, selectedShift.Shift).First(&attendance)

// 	if result.Error == gorm.ErrRecordNotFound {
// 		// N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi v·ªõi Check-in
// 		attendance = Attendance{
// 			EmployeeID: body.EmployeeID,
// 			Date:       body.Date,
// 			CheckIn:    &body.Time,
// 			Shift:      selectedShift.Shift,
// 		}
// 		if err := db.Create(&attendance).Error; err != nil {
// 			c.JSON(http.StatusInternalServerError, gin.H{"message": "Failed to record check-in"})
// 			return
// 		}
// 		c.JSON(http.StatusOK, gin.H{"message": "Check-in recorded successfully"})
// 		return
// 	}

// 	// N·∫øu ƒë√£ c√≥ check-in nh∆∞ng ch∆∞a c√≥ check-out, th√¨ c·∫≠p nh·∫≠t Check-out
// 	if attendance.CheckOut == nil {
// 		attendance.CheckOut = &body.Time
// 		if err := db.Save(&attendance).Error; err != nil {
// 			c.JSON(http.StatusInternalServerError, gin.H{"message": "Failed to record check-out"})
// 			return
// 		}
// 		c.JSON(http.StatusOK, gin.H{"message": "Check-out recorded successfully"})
// 		return
// 	}

// 	// N·∫øu ƒë√£ c√≥ c·∫£ check-in v√† check-out, kh√¥ng cho ch·∫•m c√¥ng l·∫°i
// 	c.JSON(http.StatusBadRequest, gin.H{"message": "Attendance already completed for this shift"})
// }
